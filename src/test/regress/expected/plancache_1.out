--
-- Tests to exercise the plan caching/invalidation mechanism
--
CREATE TEMP TABLE pcachetest AS SELECT * FROM int8_tbl;
ERROR:  INTO clause not yet supported
-- create and use a cached plan
PREPARE prepstmt AS SELECT * FROM pcachetest ORDER BY q1, q2;
ERROR:  Postgres-XC does not support PREPARE yet
DETAIL:  The feature is not currently supported
EXECUTE prepstmt;
ERROR:  Postgres-XC does not support EXECUTE yet
DETAIL:  The feature is not currently supported
-- and one with parameters
PREPARE prepstmt2(bigint) AS SELECT * FROM pcachetest WHERE q1 = $1 ORDER BY q1, q2;
ERROR:  Postgres-XC does not support PREPARE yet
DETAIL:  The feature is not currently supported
EXECUTE prepstmt2(123);
ERROR:  Postgres-XC does not support EXECUTE yet
DETAIL:  The feature is not currently supported
-- invalidate the plans and see what happens
DROP TABLE pcachetest;
ERROR:  table "pcachetest" does not exist
EXECUTE prepstmt;
ERROR:  Postgres-XC does not support EXECUTE yet
DETAIL:  The feature is not currently supported
EXECUTE prepstmt2(123);
ERROR:  Postgres-XC does not support EXECUTE yet
DETAIL:  The feature is not currently supported
-- recreate the temp table (this demonstrates that the raw plan is
-- purely textual and doesn't depend on OIDs, for instance)
CREATE TEMP TABLE pcachetest AS SELECT * FROM int8_tbl ORDER BY q1, q2;
ERROR:  INTO clause not yet supported
EXECUTE prepstmt;
ERROR:  Postgres-XC does not support EXECUTE yet
DETAIL:  The feature is not currently supported
EXECUTE prepstmt2(123);
ERROR:  Postgres-XC does not support EXECUTE yet
DETAIL:  The feature is not currently supported
-- prepared statements should prevent change in output tupdesc,
-- since clients probably aren't expecting that to change on the fly
ALTER TABLE pcachetest ADD COLUMN q3 bigint;
ERROR:  relation "pcachetest" does not exist
EXECUTE prepstmt;
ERROR:  Postgres-XC does not support EXECUTE yet
DETAIL:  The feature is not currently supported
EXECUTE prepstmt2(123);
ERROR:  Postgres-XC does not support EXECUTE yet
DETAIL:  The feature is not currently supported
-- but we're nice guys and will let you undo your mistake
ALTER TABLE pcachetest DROP COLUMN q3;
ERROR:  relation "pcachetest" does not exist
EXECUTE prepstmt;
ERROR:  Postgres-XC does not support EXECUTE yet
DETAIL:  The feature is not currently supported
EXECUTE prepstmt2(123);
ERROR:  Postgres-XC does not support EXECUTE yet
DETAIL:  The feature is not currently supported
-- Try it with a view, which isn't directly used in the resulting plan
-- but should trigger invalidation anyway
CREATE TEMP VIEW pcacheview AS
  SELECT * FROM pcachetest;
ERROR:  relation "pcachetest" does not exist
LINE 2:   SELECT * FROM pcachetest;
                        ^
PREPARE vprep AS SELECT * FROM pcacheview ORDER BY q1, q2;
ERROR:  Postgres-XC does not support PREPARE yet
DETAIL:  The feature is not currently supported
EXECUTE vprep;
ERROR:  Postgres-XC does not support EXECUTE yet
DETAIL:  The feature is not currently supported
CREATE OR REPLACE TEMP VIEW pcacheview AS
  SELECT q1, q2/2 AS q2 FROM pcachetest ORDER BY q1, q2;
ERROR:  relation "pcachetest" does not exist
LINE 2:   SELECT q1, q2/2 AS q2 FROM pcachetest ORDER BY q1, q2;
                                     ^
EXECUTE vprep;
ERROR:  Postgres-XC does not support EXECUTE yet
DETAIL:  The feature is not currently supported
-- Check basic SPI plan invalidation
create function cache_test(int) returns int as $$
declare total int;
begin
	create temp table t1(f1 int);
	insert into t1 values($1);
	insert into t1 values(11);
	insert into t1 values(12);
	insert into t1 values(13);
	select sum(f1) into total from t1;
	drop table t1;
	return total;
end
$$ language plpgsql;
select cache_test(1);
ERROR:  PG-XC does not yet support temporary tables
CONTEXT:  SQL statement "create temp table t1(f1 int)"
PL/pgSQL function "cache_test" line 3 at SQL statement
select cache_test(2);
ERROR:  PG-XC does not yet support temporary tables
CONTEXT:  SQL statement "create temp table t1(f1 int)"
PL/pgSQL function "cache_test" line 3 at SQL statement
select cache_test(3);
ERROR:  PG-XC does not yet support temporary tables
CONTEXT:  SQL statement "create temp table t1(f1 int)"
PL/pgSQL function "cache_test" line 3 at SQL statement
-- Check invalidation of plpgsql "simple expression"
create temp view v1 as
  select 2+2 as f1;
ERROR:  PG-XC does not yet support temporary tables
create function cache_test_2() returns int as $$
begin
	return f1 from v1;
end$$ language plpgsql;
select cache_test_2();
ERROR:  relation "v1" does not exist
LINE 1: SELECT f1 from v1
                       ^
QUERY:  SELECT f1 from v1
CONTEXT:  PL/pgSQL function "cache_test_2" line 2 at RETURN
create or replace temp view v1 as
  select 2+2+4 as f1;
ERROR:  PG-XC does not yet support temporary tables
select cache_test_2();
ERROR:  relation "v1" does not exist
LINE 1: SELECT f1 from v1
                       ^
QUERY:  SELECT f1 from v1
CONTEXT:  PL/pgSQL function "cache_test_2" line 2 at RETURN
create or replace temp view v1 as
  select 2+2+4+(select max(unique1) from tenk1) as f1;
ERROR:  PG-XC does not yet support temporary tables
select cache_test_2();
ERROR:  relation "v1" does not exist
LINE 1: SELECT f1 from v1
                       ^
QUERY:  SELECT f1 from v1
CONTEXT:  PL/pgSQL function "cache_test_2" line 2 at RETURN
--- Check that change of search_path is ignored by replans
create schema s1
  create table abc (f1 int);
create schema s2
  create table abc (f1 int);
insert into s1.abc values(123);
insert into s2.abc values(456);
set search_path = s1;
prepare p1 as select f1 from abc;
ERROR:  Postgres-XC does not support PREPARE yet
DETAIL:  The feature is not currently supported
execute p1;
ERROR:  Postgres-XC does not support EXECUTE yet
DETAIL:  The feature is not currently supported
set search_path = s2;
select f1 from abc;
ERROR:  relation "abc" does not exist
execute p1;
ERROR:  Postgres-XC does not support EXECUTE yet
DETAIL:  The feature is not currently supported
alter table s1.abc add column f2 float8;   -- force replan
execute p1;
ERROR:  Postgres-XC does not support EXECUTE yet
DETAIL:  The feature is not currently supported
drop schema s1 cascade;
NOTICE:  drop cascades to table s1.abc
drop schema s2 cascade;
NOTICE:  drop cascades to table abc
reset search_path;
-- Check that invalidation deals with regclass constants
create temp sequence seq;
ERROR:  Postgres-XC does not support TEMPORARY SEQUENCE yet
DETAIL:  The feature is not currently supported
prepare p2 as select nextval('seq');
ERROR:  Postgres-XC does not support PREPARE yet
DETAIL:  The feature is not currently supported
execute p2;
ERROR:  Postgres-XC does not support EXECUTE yet
DETAIL:  The feature is not currently supported
drop sequence seq;
ERROR:  sequence "seq" does not exist
create temp sequence seq;
ERROR:  Postgres-XC does not support TEMPORARY SEQUENCE yet
DETAIL:  The feature is not currently supported
execute p2;
ERROR:  Postgres-XC does not support EXECUTE yet
DETAIL:  The feature is not currently supported
-- Check DDL via SPI, immediately followed by SPI plan re-use
-- (bug in original coding)
create function cachebug() returns void as $$
declare r int;
begin
  drop table if exists temptable cascade;
  create temp table temptable as select * from generate_series(1,3) as f1;
  create temp view vv as select * from temptable;
  for r in select * from vv loop
    raise notice '%', r;
  end loop;
end$$ language plpgsql;
select cachebug();
NOTICE:  table "temptable" does not exist, skipping
CONTEXT:  SQL statement "drop table if exists temptable cascade"
PL/pgSQL function "cachebug" line 3 at SQL statement
ERROR:  INTO clause not yet supported
CONTEXT:  SQL statement "create temp table temptable as select * from generate_series(1,3) as f1"
PL/pgSQL function "cachebug" line 4 at SQL statement
select cachebug();
NOTICE:  table "temptable" does not exist, skipping
CONTEXT:  SQL statement "drop table if exists temptable cascade"
PL/pgSQL function "cachebug" line 3 at SQL statement
ERROR:  INTO clause not yet supported
CONTEXT:  SQL statement "create temp table temptable as select * from generate_series(1,3) as f1"
PL/pgSQL function "cachebug" line 4 at SQL statement
